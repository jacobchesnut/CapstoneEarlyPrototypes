#pragma enable_d3d11_debug_symbols

#include "DataStructure/RayFlag.compute"
#include "Ray.compute"
#include "RayHit.compute"
#include "DataStructure/LightInfo.compute"
#include "DataStructure/LightHit.compute"
#include "DataStructure/SecRaysAtHit.compute"
#include "Intersect/SphereIntersectUtils.compute"
#include "Intersect/TriangleIntersectUtils.compute"
#include "Primitive/Primitive.compute"
#include "BVH/RTBoundingBox.compute"

static const float PI = 3.14159265359f;


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// Camera
float4 _CameraForward;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float _CameraOrthographicSize;
float4x4 _CameraLocalToWorld;

// Ray Generation
int _RayGenID;

//Skybox
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

// Texture
Texture2DArray _MatTexture;

// Primitive
int _NumOfPrimitive;
StructuredBuffer<Primitive> _Primitives;
StructuredBuffer<float4x4> _WorldToPrimitives;

// BVH
StructuredBuffer<RTBoundingBox> _BVHTree;

// Light
int _NumOfLights;
StructuredBuffer<LightInfo> _Lights;

// Ambient
float3 _AmbientLightUpper;

// For VR eye difference
bool _LeftEye;

// Foveated Specific
float4 _frustumVector; //frustum info (width, height, distance), a is unused
float4 _viewVector; //vector of the gaze view (x, y, z), a is unused
//float _innerAngleMax; //area of foveal region
//tells the shader we're generating the lower res images for ray sharing
//0 = final image, including any foveated rendering
//1 = full resolution
//2 = half resolution
//3 = quarter resolution
//4 = eighth resolution
int _runRes; 
bool _runNoFoveated; //tells the shader to make the frame without using foveated rendering
bool _onlyOneSample; //tells the shader to ignore the number of samples to use
bool _showTint; //should we tint based on region
bool _showOverlay; //should we show the overlay
bool _UseTAAObjectID;
bool _UseGaussianTAA;
static const float _overlaySize = 0.005f; //size of overlay in angle
float _debugRegionBorderSize;
RWTexture2DArray<float4> _LowResTexture;
int _temporalFramePosition; //which frame to write to for TAA
int _totalNoTAAFrames; //the total number of TAA frames being used
float _weightDecreaseFactor; //rate at which weight of previous frames decreases
float _TriangularDecreaseFactor; //rate for linear decrease
RWTexture2DArray<float4> _PastTexture; //past frame data for TAA
//TAA frames are on odd numbers ((_temporalFramePosition * 2) + 1), object ids are on even numbers (2*_temporalFramePosition)

//RWTexture2D<float4> HalfRes; //half resolution texture for ray sharing
//RWTexture2D<float4> QuarterRes; //quarter resolution texture for ray sharing
//RWTexture2D<float4> EighthRes; //eighth resolution texture for ray sharing

//calibration info
float _xOffset;
float _yOffset;
//these should be in radians
float _innerAngleMax; //first
float _secondAngleMax; //second
float _thirdAngleMax; //third
float _boundaryAngleMax;


// Placeholder
float3 missShader(float3 direction) {
    // Sample the skybox and write it
    float theta = acos(direction.y) / -3.14159265359f;
    float phi = atan2(direction.x, -direction.z) / -3.14159265359f * 0.5f;
    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
}

#include "Intersect/IntersectShaderCollection.compute"

#include "Light/CustomLights.compute"

#include "Shading/CustomShaderCollection.compute"

#include "Custom/RayGeneration/CustomRayGeneration.compute"

#include "RayCasting/Trace.compute"


// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// MAX_RAY_GENERATION = 4;
// MAX_SECONDARY_RAYS_PER_GENERATION = 4;

static const int MAX_RAY_GEN = 4;
static const int MAX_RAY_PER_LEVEL = 2;

int childRayOffset(int myLevel) 
{
    return (myLevel + 1) * MAX_RAY_PER_LEVEL;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    if(_runRes == 1){
        //width and height remain the same because this is full resolution
        //width = width;
        //height = height;
    }
    if(_runRes == 2){
        //divide width and height by 2, because we're rendering to the half res Texture
        width = width / 2;
        height = height / 2;
    }
    if(_runRes == 3){
        //divide width and height by 4, because we're rendering to the quarter res Texture
        width = width / 4;
        height = height / 4;
    }
    if(_runRes == 4){
        //divide width and height by 8, because we're rendering to the eighth res Texture
        width = width / 8;
        height = height / 8;
    }

    //default region cutoff points:
    float _maxQualityAngleMax = 0.091f;
    //float _innerAngleMax = 0.222f;
    //float _secondAngleMax = 0.485f;
    //float _thirdAngleMax = 1.010f;

    //calculate offset
    //currently static numbers for the VR cameras
    float FOV = 90;
    //float FOVRad = 1.5708;
    //float _xOffset = 11;
    //if(_LeftEye){
    //    _xOffset = -11;
    //}
    //float yOffset = 10;

    int2 finalXY = {id.x + ((width * _xOffset) / FOV), id.y + ((height * _yOffset) / FOV)};

    //wrap around if the offset places us outside the array bounds
    if(finalXY.x < 0){
        finalXY.x += width;
    }
    if(finalXY.x >= width){
        finalXY.x -= width;
    }
    if(finalXY.y < 0){
        finalXY.y += height;
    }
    if(finalXY.y >= height){
        finalXY.y += height;
    } 

    //get relative screen location (-0.5 through 0.5) for angle calculations
    float widthF = width;
    float screenXF = id.x;
    float heightF = height;
    float screenYF = id.y;
    float relativeScreenX = (screenXF/widthF) - 0.5;
    float relativeScreenY = (screenYF/heightF) - 0.5;

    //check the angle distance from the look direction
    //angle = arccos(a.b / magA + magB)
    //A is the vector to this pixel
    //x = (texX - 0.5) * width, y = (texY - 0.5) * height, z = given distance
    float3 vecA = {(relativeScreenX) * _frustumVector.x, (relativeScreenY) * _frustumVector.y, _frustumVector.z};
    //B is the direction vector of the gaze
                
    float dot = (vecA.x * _viewVector.x) + (vecA.y * _viewVector.y) + (vecA.z * _viewVector.z);
    float magA = sqrt((vecA.x * vecA.x) + (vecA.y * vecA.y) + (vecA.z * vecA.z));
    float magB = sqrt((_viewVector.x * _viewVector.x) + (_viewVector.y * _viewVector.y) + (_viewVector.z * _viewVector.z));
    float angle = acos((dot / (magA * magB)));

    //now calculate angle from center
    //dot = vecA.z;
    //magB = 1
    float angleFromCenter = acos(vecA.z/magA);


    if((angle > (_innerAngleMax + 0.005f)) && (_runRes == 1)){ //add small bump to avoid edge cases
        _LowResTexture[int3(finalXY.x, finalXY.y, 0)] = float4(1,0,1,1); //don't render here because there will be no pulling from here
        return;
    }
    if((angle < (_innerAngleMax - 0.005f) || angle > (_secondAngleMax + 0.005f)) && (_runRes == 2)){ //add small bump to avoid edge cases
        _LowResTexture[int3(finalXY.x, finalXY.y, 1)] = float4(1,0,1,1); //don't render here because there will be no pulling from here
        return;
    }
    if((angle < (_secondAngleMax - 0.005f) || angle > (_thirdAngleMax + 0.005f)) && (_runRes == 3)){ //add small bump to avoid edge cases
        _LowResTexture[int3(finalXY.x, finalXY.y, 2)] = float4(1,0,1,1); //don't render here because there will be no pulling from here
        return;
    }
    if(angle < (_thirdAngleMax - 0.005f) && (_runRes == 4)){
        _LowResTexture[int3(finalXY.x, finalXY.y, 3)] = float4(1,0,1,1); //don't render here because there will be no pulling from here
        return;
    }

    if(!(_runRes > 0) && _showOverlay && angle <= _overlaySize){
        //just render pink to show center of user gaze
        Result[finalXY] = float4(1,0,1,1);
        return;
    }

    //can be used to debug if we're in the angle, tints are better though
    //if(angle > _innerAngleMax){
    //    Result[finalXY] = float4(1,0,0,1);
    //    return;
    //}

    uint numberOfRay = NumberOfRay(width, height, id, _RayGenID);
    if(_onlyOneSample){
        numberOfRay = 1;//only have one ray
    }
    if(!_runNoFoveated){
        if(_runRes > 0){
            numberOfRay = 1; //only have one ray
        }
        else{
            numberOfRay = 0; //do not render ray on final pass
            //if(angle > _maxQualityAngleMax){
            //    numberOfRay = 1; //only have one ray outside of the inner radius
            //}
            //if(angle > _innerAngleMax){
                //only use low res (don't shoot rays)
            //    numberOfRay = 0;
            //}
            //if(angle > _thirdAngleMax){
                //outside viewable area (don't render)
                //actually, for now render as it may be better to adapt to center of display.
                //Result[finalXY] = float4(0,0,0,1);
                //return;
            //}
            if(angleFromCenter > 0.785f){ //45 degrees from center
                //outside viewable area (don't render)
                Result[finalXY] = float4(0,0,0,1);
                return;
            }
        }
    }

    float4 finalColor = float4(0.0f, 0.0f, 0.0f, 0.0f);

    Ray _secondaryRayStack[MAX_RAY_GEN * MAX_RAY_PER_LEVEL];
    int srSbilingAtEachLevel[MAX_RAY_GEN];
    for (uint e = 0; e < MAX_RAY_GEN; e++)
    {
        srSbilingAtEachLevel[e] = -1;
    }

    [fastopt] for (uint i = 0; i < numberOfRay; i++) 
    {
        //for multi-sampling in one frame
        //Ray ray = RayGeneration(width, height, id, _RayGenID, i);

        //otherwise for multisampling with TAA
        Ray ray = RayGeneration(width, height, id, _RayGenID, _temporalFramePosition);

        // Trace
        RayHit hit = Trace(ray);    // Exclude nothing

        float3 result;
        if (hit.primitiveId == -1) 
        {
            // Miss Shader
            result = missShader(ray.direction);
        } 
        else 
        {
            // -
            
            int srLevel = -1;
            float3 secRayCombinedColor = float3(0, 0, 0);
            /*
            // TODO: Refactor this to avoid special case for primary ray
            SecRaysAtHit secRaysAtHit = CreateSecRaysAtHit();   // TODO: Optimization: Avoid initialize the internal Ray array
            SecRays(ray, hit, secRaysAtHit);
            
            // Check if there is secondary rays
            if (secRaysAtHit.srays[0].tmin > -1 * 1.#INF) 
            {
                srLevel = srLevel + 1;
                srSbilingAtEachLevel[0] = 0;
                [fastopt] for (int j = 0; j < MAX_RAY_PER_LEVEL; j++) //fastopt added for faster compilation
                {
                    _secondaryRayStack[srLevel * MAX_RAY_PER_LEVEL + j] = secRaysAtHit.srays[j];  // Copy to secondary rays stack
                }

                [fastopt] while (srLevel > -1)
                {
                    if (srSbilingAtEachLevel[srLevel] < MAX_RAY_PER_LEVEL)
                    {
                        int secRayIndex = srLevel * MAX_RAY_PER_LEVEL + srSbilingAtEachLevel[srLevel];
                        if (srLevel < (MAX_RAY_GEN - 1))
                        {
                            if (srSbilingAtEachLevel[srLevel + 1] < 0) 
                            {
                                RayHit secHit = Trace(_secondaryRayStack[secRayIndex]);
                                // -
                                if (secHit.primitiveId == -1)
                                {
                                    _secondaryRayStack[secRayIndex].color = missShader(_secondaryRayStack[secRayIndex].direction);
                                    // Move to sibling
                                    srSbilingAtEachLevel[srLevel] = srSbilingAtEachLevel[srLevel] + 1;
                                }
                                else
                                {
                                    SecRaysAtHit _hit = CreateSecRaysAtHit();   // TODO: Optimization: Avoid initialize the internal Ray array
                                    SecRays(_secondaryRayStack[secRayIndex], secHit, _hit);
                                    [fastopt] for (int i = 0; i < MAX_RAY_PER_LEVEL; i++) //fastopt added for faster compilation
                                    {
                                        _secondaryRayStack[childRayOffset(srLevel) + i] = _hit.srays[i];  // Copy to secondary rays stack
                                    }
                                    // Move to children
                                    srLevel = srLevel + 1;
                                    srSbilingAtEachLevel[srLevel] = 0; // Start from the first index of my children
                                }
                            }
                            else
                            {
                                // Back from children. Calculate the ray color from children rays
                                srSbilingAtEachLevel[srLevel + 1] = -1;
                                float3 children = float3(0, 0, 0);
                                [fastopt] for (int c = 0; c < MAX_RAY_PER_LEVEL; c++) //fastopt added for faster compilation
                                {
                                    children = children + _secondaryRayStack[childRayOffset(srLevel) + c].color * _secondaryRayStack[childRayOffset(srLevel) + c].weight;
                                }
                                RayHit secHit = Trace(_secondaryRayStack[secRayIndex]); //TODO: Optimization. Avoid doing trace again.
                                // -
                                _secondaryRayStack[secRayIndex].color = ClosestHit(
                                                                        _secondaryRayStack[secRayIndex],
                                                                        secHit,
                                                                        _AmbientLightUpper,
                                                                        children
                                                                    );
                                // Move to sibling
                                srSbilingAtEachLevel[srLevel] = srSbilingAtEachLevel[srLevel] + 1;
                            }
                        }
                        else
                        {
                            // The deepest iteration. We only allow ray-scene intersection. No more secondary ray spawning.
                            RayHit secHit = Trace(_secondaryRayStack[secRayIndex]);
                            // -
                            if (secHit.primitiveId == -1)
                            {
                                _secondaryRayStack[secRayIndex].color = missShader(_secondaryRayStack[secRayIndex].direction);
                            }
                            else
                            {
                                _secondaryRayStack[secRayIndex].color = ClosestHit(
                                                                        _secondaryRayStack[secRayIndex],
                                                                        secHit,
                                                                        _AmbientLightUpper,
                                                                        float3(0, 0, 0) // No more secondary hit
                                                                    );
                            }
                            
                            // Move to sibling
                            srSbilingAtEachLevel[srLevel] = srSbilingAtEachLevel[srLevel] + 1;
                        }
                    }
                    else
                    {
                        // Finish iterating this level. Fallback to parent.
                        srLevel = srLevel - 1;
                    }
                }
                srSbilingAtEachLevel[0] = -1;

                [fastopt]for (int c = 0; c < MAX_RAY_PER_LEVEL; c++) //fastopt added for faster compilation
                {
                    secRayCombinedColor = secRayCombinedColor + _secondaryRayStack[c].color * _secondaryRayStack[c].weight;
                }
            }*/ //attempting removal of secondary rays

            // Closet Hit Shader
            result = ClosestHit(
                ray,
                hit,
                _AmbientLightUpper,
                secRayCombinedColor
            );
        }
        
        if(_runNoFoveated){
            finalColor += float4(result, 1) / numberOfRay; //just use raw ray color
        }
        else{
            if(_runRes > 0){
                finalColor += float4(result, 1) / numberOfRay; //just use raw ray color
            }
            else{
                if(angle <= _innerAngleMax){
                    finalColor += float4(result, 1) / numberOfRay; //just use raw ray color
                 }
                else{
                    finalColor += float4(result, 1) / (numberOfRay + 1); //numberOfRay + 1 because we will be adding the color of the half res ray
                }
            }
        }

        //set primitiveId for TAA
        int numHighResPixels = 0;
        if(_runRes == 1){
            numHighResPixels = 1;
        }
        if(_runRes == 2){
            numHighResPixels = 2;
        }
        if(_runRes == 3){
            numHighResPixels = 4;
        }
        if(_runRes == 4){
            numHighResPixels = 8;
        }

        if(_UseTAAObjectID){
            for(int i = 0; i < numHighResPixels; i++){
                for(int j = 0; j < numHighResPixels; j++){
                    _PastTexture[int3((finalXY.x * numHighResPixels) + i, (finalXY.y * numHighResPixels) + j, _temporalFramePosition * 2)] = float4(0,0,0,hit.primitiveId);
                }
            }
        }
        


    }
    //add shared Ray
    if(!(_runRes > 0) && !_runNoFoveated){
        if(angle < _innerAngleMax){
            finalColor += _LowResTexture[int3(finalXY.x, finalXY.y, 0)];// / (numberOfRay + 1);
        }
        if(angle >= _innerAngleMax && angle < _secondAngleMax){
            finalColor += _LowResTexture[int3(finalXY.x/2, finalXY.y/2, 1)];// / (numberOfRay + 1);
        }
        if(angle >= _secondAngleMax && angle < _thirdAngleMax){
            finalColor += _LowResTexture[int3(finalXY.x/4, finalXY.y/4, 2)];// / (numberOfRay + 1);
        }
        if(angle >= _thirdAngleMax){
            finalColor += _LowResTexture[int3(finalXY.x/8, finalXY.y/8, 3)];// / (numberOfRay + 1);
        }
        //finalColor = HalfRes[finalXY/2]; //copy over half res for debug
        //also add tint if needed
        if(_showTint){
            if(abs(angle - _innerAngleMax) <= _debugRegionBorderSize){
                finalColor += float4(0,0.1f,0,0); //green border
            }
            else{
                if(angle <= _maxQualityAngleMax){
                    finalColor += float4(0,0.1f,0,0); //green for max quality inside
                }
                if(angle > _maxQualityAngleMax && angle <= _innerAngleMax){
                    finalColor += float4(0,0,0.1f,0); //blue inside
                }
                if(angle > _innerAngleMax && angle <= _secondAngleMax){
                    finalColor += float4(0.1f,0,0,0); //red outside
                }
                if(angle > _secondAngleMax && angle <= _thirdAngleMax){
                    finalColor += float4(0.1f,0.1f,0,0); //yellow in far region
                }
            }
        }
    }

    if(_runRes == 1){
        //render to the full texture
        _LowResTexture[int3(finalXY.x, finalXY.y, 0)] = finalColor;
    }
    if(_runRes == 2){
        //render to the half texture
        _LowResTexture[int3(finalXY.x, finalXY.y, 1)] = finalColor;
    }
    if(_runRes == 3){
        //render to the quarter texture
        _LowResTexture[int3(finalXY.x, finalXY.y, 2)] = finalColor;
    }
    if(_runRes == 4){
        //render to the eighth texture
        _LowResTexture[int3(finalXY.x, finalXY.y, 3)] = finalColor;
    }

    //_PastTexture[int3(finalXY.x, finalXY.y, _temporalFramePosition)] = finalColor;
    _PastTexture[int3(finalXY.x, finalXY.y, (_temporalFramePosition * 2) + 1)] = finalColor; //write to TAA array before doing TAA

    //run TAA
    //
    //works by adding color from past frames with decreasing weight, and then dividing by the final combined weight to get a weighted average
    if(!(_runRes > 0)){ 
        int currentFrame = _temporalFramePosition;//start at current frame
        float totalWeight = 1.0f;
        float currentWeight = 1.0f;
        for(int i = 0; i < _totalNoTAAFrames; i++){
            currentFrame--;//go to previous frame
            if(currentFrame < 0){
                currentFrame += _totalNoTAAFrames; //go to front of list/wraparound
            }
            currentWeight *= _weightDecreaseFactor; //exponential decrease
            currentWeight -= _TriangularDecreaseFactor;
            if(_UseGaussianTAA){
                currentWeight = (1/sqrt(2 * PI * _weightDecreaseFactor * _weightDecreaseFactor)) * exp(-((i * i)/(2 * _weightDecreaseFactor * _weightDecreaseFactor)));
                }
            if(currentWeight <= 0){
                //we are no longer interested in frames beyond this point.
                break;
            }
            if(_PastTexture[int3(finalXY.x, finalXY.y, currentFrame * 2)].a == _PastTexture[int3(finalXY.x, finalXY.y, _temporalFramePosition * 2)].a || !_UseTAAObjectID){
                finalColor += (_PastTexture[int3(finalXY.x, finalXY.y, (currentFrame*2)+1)] * currentWeight); //if we hit the same object, use the TAA data
            }
            else{
                finalColor += (_PastTexture[int3(finalXY.x, finalXY.y, (_temporalFramePosition*2)+1)] * currentWeight); //otherwise, substitute with current frame
            }
            totalWeight += currentWeight;
        }
        finalColor /= totalWeight;
    }


    //test change to force recompile

    Result[finalXY] = finalColor;

    

    //Result[id.xy] = finalColor;
    
}
