#ifndef CustomPinCameraTable_RayGen_Compute
#define CustomPinCameraTable_RayGen_Compute

// [RayGeneration(CustomPinCameraSS)]
Ray CustomPinCameraTable(uint width, uint height, uint3 id, uint iter)
{
    //generate table (the table is defined here)
    float2 offsetTable[4]; //length of 4
    //current idea is to try the four "corners" of pixel
    offsetTable[0] = float2(0.25f, 0.25f);
    offsetTable[1] = float2(0.75f, 0.25f);
    offsetTable[2] = float2(0.25f, 0.75f);
    offsetTable[3] = float2(0.75f, 0.75f);

    if(iter >= 4){
        iter = iter % 4; //if we iterate past table length, return to start
    }

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + offsetTable[iter]) / float2(width, height) * 2.0f - 1.0f);

    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction, 4);
}

uint CustomPinCameraTableNumberOfRay(uint width, uint height, uint3 id)
{
    return 1;
}

#endif